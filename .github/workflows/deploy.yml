name: Build and deploy

# Update every time we push to the main branch
on:
  push:
    branches:
    - '*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Start SSH agent
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SURVEYSITE_SSH_KEY }}

#    - name: Create GitHub deployment
#      uses: chrnorm/deployment-action@v1.0.0
#      id: github_deployment
#      with:
#        token: ${{ github.token }}
#        target_url: https://survey.r-anime.moe
#        environment: production

    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Node
      uses: actions/setup-node@v3

    - name: Apply frontend updates
      run: |
        cd frontend
        npm ci
        NODE_ENV=production npm run build
        rsync -avz dist surveysite@survey.r-anime.moe:/home/surveysite/surveysite/frontend/temp_pls_ignore

    - name: Apply backend updates
      run: |
        ssh -o StrictHostKeyChecking=no surveysite@survey.r-anime.moe /bin/bash << 'EOF'
          # Causes this script to exit early and report a failure if any command errors
          set -e

          # Use our virtualenv
          source .venv/bin/activate

          # Install dependencies
          pip install -r requirements.txt

          # Run migrations, pulling environment variables from the .env file
          eval $(cat .env) python manage.py migrate

          # Collect all static files into STATIC_ROOT
          eval $(cat .env) python manage.py collectstatic --noinput

          # Restart the service to make the new stuff go live
          sudo systemctl restart surveysite.service
        EOF

#    - name: Update deployment status (success)
#      if: success()
#      uses: chrnorm/deployment-status@v1.0.0
#      with:
#        token: ${{ github.token }}
#        state: success
#        deployment_id: ${{ steps.github_deployment.outputs.deployment_id }}
#
#    - name: Update deployment status (failure)
#      if: failure()
#      uses: chrnorm/deployment-status@v1.0.0
#      with:
#        token: ${{ github.token }}
#        state: failure
#        deployment_id: ${{ steps.github_deployment.outputs.deployment_id }}
